var request = require('superagent');
var server = require('../app');
var assert = require('assert');
var func = require('../functions');
var should = require('should');

var io = require('socket.io-client');

server.start();

var URL = 'http://localhost:3000';

describe('request', function() {
    describe('persistent agent', function() {
	var agent1 = request.agent();
	var agent2 = request.agent();
	var agent3 = request.agent();
	var agent4 = request.agent();

	/*  it('should gain a session on POST', function(done) {
	    agent3
            .post('http://localhost:4000/signin')
            .end(function(err, res) {
            should.not.exist(err);
            res.should.have.status(200);
            should.not.exist(res.headers['set-cookie']);
            res.text.should.include('dashboard');
            done();
            });
	    });*/

	it('should start with empty session (set cookies)', function(done) {
	    agent1
		.get(URL + '/userinfo')
		.end(function(err, res) {
		    should.exist(err);
		    assert.equal(res.statusCode, 401);
		    done();
		});
	});

	it('should gain a session (cookies already set)', function(done) {
	    agent1
		.post(URL + '/register')
		.send({username: "klas123", password: "klas123", firstname: "Klas", lastname: "Arvidsson"})
		.end(function(err, res) {
		    should.not.exist(err);
		    assert.equal(res.statusCode, 200);
		    //should.not.exist(res.headers['set-cookie']);
		    //res.text.should.include('dashboard');
		    done();
		});
	});

	it('should gain a session (cookies already set)', function(done) {
	    agent1
		.post(URL + '/logout')
		.end(function(err, res) {
		    should.not.exist(err);
		    assert.equal(res.statusCode, 200);
		    //should.not.exist(res.headers['set-cookie']);
		    //res.text.should.include('dashboard');
		    done();
		});
	});

	it('should gain a session (cookies already set)', function(done) {
	    agent2
		.post(URL + '/register')
		.send({username: "test123", password: "test123", firstname: "test", lastname: "123"})
		.end(function(err, res) {
		    should.not.exist(err);
		    assert.equal(res.statusCode, 200);
		    //should.not.exist(res.headers['set-cookie']);
		    //res.text.should.include('dashboard');
		    done();
		});
	});

	it('should gain a session (cookies already set)', function(done) {
	    agent1
		.post(URL + '/logout')
		.end(function(err, res) {
		    should.not.exist(err);
		    assert.equal(res.statusCode, 200);
		    //should.not.exist(res.headers['set-cookie']);
		    //res.text.should.include('dashboard');
		    done();
		});
	});

	it('should start with empty session (set cookies)', function(done) {
	    agent1
		.get(URL + '/')
		.end(function(err, res) {

		    assert.equal(res.statusCode, 200);
		    done();
		});
	});

	it('should start with empty session (set cookies)', function(done) {
	    agent1
		.get(URL + '/')
		.end(function(err, res) {

		    assert.equal(res.statusCode, 200);
		    done();
		});
	});

	

	it('should gain a session (cookies already set)', function(done) {
	    agent1
		.post(URL + '/login')
		.send({username: "klas123", password: "klas123"})
		.end(function(err, res) {
		    should.not.exist(err);
		    assert.equal(res.statusCode, 200);
		    //should.not.exist(res.headers['set-cookie']);
		    //res.text.should.include('dashboard');
		    done();
		});
	});

	it('should persist cookies across requests', function(done) {
	    agent1
		.get(URL + '/userinfo')
		.end(function(err, res) {
		    //should.not.exist(err);
		    assert.equal(res.statusCode, 200);
		    done();
		});
	});

	it('should persist cookies across requests', function(done) {
	    agent1
		.get(URL + '/friends')
		.end(function(err, res) {
		    //should.not.exist(err);
		    assert.equal(res.statusCode, 200);
		    done();
		});
	});

	it('should persist cookies across requests', function(done) {
	    agent1
		.get(URL + '/users')
		.end(function(err, res) {
		    //should.not.exist(err);
		    assert.equal(res.statusCode, 200);
		    done();
		});
	});

	it('should persist cookies across requests', function(done) {
	    agent1
		.get(URL + '/images')
		.end(function(err, res) {
		    //should.not.exist(err);
		    assert.equal(res.statusCode, 200);
		    done();
		});
	});

        it('should persist cookies across requests', function(done) {
	    agent1
		.get(URL + '/checkForUpdates?user=562006cbe3452a261363c000')
		.end(function(err, res) {
		    //should.not.exist(err);
		    assert.equal(res.statusCode, 200);
		    done();
		});
	});

	it('should persist cookies across requests', function(done) {
	    agent1
		.get(URL + '/checkForUpdates?user=req.user._id')
		.end(function(err, res) {
		    //should.not.exist(err);
		    assert.equal(res.statusCode, 200);
		    done();
		});
	});

	it('should persist cookies across requests', function(done) {
	    agent1
		.get(URL + '/loggedin')
		.end(function(err, res) {
		    //should.not.exist(err);
		    assert.equal(res.statusCode, 200);
		    done();
		});
	});

	it('should persist cookies across requests', function(done) {
	    agent1
		.get(URL + '/posts')
		.end(function(err, res) {
		    //should.not.exist(err);
		    assert.equal(res.statusCode, 200);
		    done();
		});
	});

	it('should gain a session (cookies already set)', function(done) {
	    agent1
		.post(URL + '/addfriend')
		.send({userIdToAdd: '56201be309e9bae11893d59e', nameToAdd: 'test 123'})
		.end(function(err, res) {
		    //should.not.exist(err);
		    assert.equal(res.statusCode, 200);
		    //should.not.exist(res.headers['set-cookie']);
		    //res.text.should.include('dashboard');
		    done();
		});
	});

	it('should gain a session (cookies already set)', function(done) {
	    agent1
		.post(URL + '/upload')
		.attach('image', '../../../Desktop/testimage4.png')
		.end(function(err, res) {
		    //should.not.exist(err);
		    assert.equal(res.statusCode, 200);
		    //should.not.exist(res.headers['set-cookie']);
		    //res.text.should.include('dashboard');
		    done();
		});
	});

	it('should gain a session (cookies already set)', function(done) {
	    agent1
		.post(URL + '/newpost')
		.send({text: "Hej mig själv" })
		.end(function(err, res) {
		    //should.not.exist(err);
		    assert.equal(res.statusCode, 200);
		    //should.not.exist(res.headers['set-cookie']);
		    //res.text.should.include('dashboard');
		    done();
		});
	});

	it('Should be able to send a message', function(done) {
	    var socket = io.connect(URL);
	    
	    socket.emit('send:message', {
		user: "1",
		reciever: "2",
		text: "Socket test!"
	    });

	    setTimeout(done, 1000);
	    
	});

    });
});



  /*  it('should have the cookie set in the end callback', function(done) {
      agent4
        .post('http://localhost:4000/setcookie')
        .end(function(err, res) {
          agent4
            .get('http://localhost:4000/getcookie')
            .end(function(err, res) {
              should.not.exist(err);
              res.should.have.status(200);
              assert(res.text === 'jar');
              done();
            });
        });
    });

    it('should not share cookies', function(done) {
      agent2
        .get('http://localhost:4000/dashboard')
        .end(function(err, res) {
          should.exist(err);
          res.should.have.status(401);
          done();
        });
    });

    it('should not lose cookies between agents', function(done) {
      agent1
        .get('http://localhost:4000/dashboard')
        .end(function(err, res) {
          should.not.exist(err);
          res.should.have.status(200);
          done();
        });
    });

    it('should be able to follow redirects', function(done) {
      agent1
        .get('http://localhost:4000/')
        .end(function(err, res) {
          should.not.exist(err);
          res.should.have.status(200);
          res.text.should.include('dashboard');
          done();
        });
    });

    it('should be able to post redirects', function(done) {
      agent1
        .post('http://localhost:4000/redirect')
        .send({ foo: 'bar', baz: 'blaaah' })
        .end(function(err, res) {
          should.not.exist(err);
          res.should.have.status(200);
          res.text.should.include('simple');
          res.redirects.should.eql(['http://localhost:4000/simple']);
          done();
        });
    });

    it('should be able to limit redirects', function(done) {
      agent1
        .get('http://localhost:4000/')
        .redirects(0)
        .end(function(err, res) {
          should.exist(err);
          res.should.have.status(302);
          res.redirects.should.eql([]);
          res.header.location.should.equal('/dashboard');
          done();
        });
    });

    it('should be able to create a new session (clear cookie)', function(done) {
      agent1
        .post('http://localhost:4000/signout')
        .end(function(err, res) {
          should.not.exist(err);
          res.should.have.status(200);
          should.exist(res.headers['set-cookie']);
          done();
        });
    });

    it('should regenerate with an empty session', function(done) {
      agent1
        .get('http://localhost:4000/dashboard')
        .end(function(err, res) {
          should.exist(err);
          res.should.have.status(401);
          should.not.exist(res.headers['set-cookie']);
          done();
        });
    });*/
